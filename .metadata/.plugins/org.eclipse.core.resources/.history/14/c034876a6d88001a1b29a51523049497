/*
 * generated by Xtext 2.21.0
 */
package org.xtext.example.mydsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import javax.swing.JOptionPane
import java.util.HashMap
import org.xtext.example.mydsl.mathCompiler.MathExp
import org.xtext.example.mydsl.mathCompiler.Plus
import org.xtext.example.mydsl.mathCompiler.Minus
import org.xtext.example.mydsl.mathCompiler.Mult
import org.xtext.example.mydsl.mathCompiler.Div
import org.xtext.example.mydsl.mathCompiler.Num
import org.xtext.example.mydsl.mathCompiler.Var
import org.xtext.example.mydsl.mathCompiler.Let
import org.xtext.example.mydsl.mathCompiler.Expression
import java.util.Map
import java.util.ArrayList

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class MathCompilerGenerator extends AbstractGenerator {
		
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val math = resource.allContents.filter(MathExp).next
		val result = math.compute
		printClass(math, fsa)
		System.out.println("Math expression = "+math.display)
		JOptionPane.showMessageDialog(null, "result = "+result,"Math Language", JOptionPane.INFORMATION_MESSAGE)
		
	}
	
	//
	// Compute function: computes value of expression
	// Note: written according to illegal left-recursive grammar, requires fix
	//
	
	def int compute(MathExp math) { 
		for(Object e : math.exp)
		System.out.println(math.exp.size())
	//	math.exp.computeExp(new HashMap<String,Integer>)
		return 1
	}

	
	def int computeExp(Expression exp, Map<String,Integer> env) {
		switch exp {
			Plus: exp.left.computeExp(env)+exp.right.computeExp(env)
			Minus: exp.left.computeExp(env)-exp.right.computeExp(env)
			Mult: exp.left.computeExp(env)*exp.right.computeExp(env)
			Div: exp.left.computeExp(env)/exp.right.computeExp(env)
			Num: exp.value
			Var: env.get(exp.id)
			Let: exp.body.computeExp(env.bind(exp.id,exp.binding.computeExp(env)))
			default: throw new Error("Invalid expression")
		}
	}
	
	def Map<String, Integer> bind(Map<String, Integer> env1, String name, int value) {
		val env2 = new HashMap<String,Integer>(env1)
		env2.put(name,value)
		env2 
	}

	//
	// Display function: show complete syntax tree
	// Note: written according to illegal left-recursive grammar, requires fix
	//

	def String display(MathExp math) { 
		//math.exp.displayExp
	}
	
	def String displayExp(Expression exp) {
		switch exp {
			Plus: exp.left.displayExp+"+"+exp.right.displayExp
			Minus: exp.left.displayExp+"-"+exp.right.displayExp
			Mult: exp.left.displayExp+"*"+exp.right.displayExp
			Div: exp.left.displayExp+"/"+exp.right.displayExp
			Num: Integer.toString(exp.value)
			Var: exp.id
			Let: '''let «exp.id» = «exp.binding.displayExp» in «exp.body.displayExp» end'''
			default: throw new Error("Invalid expression")
		}
	}
	
	def printClass(MathExp math, IFileSystemAccess2 fsa){
		
//		var a = '''
//		//Package
//		//Imports
//
//		public class Math{«FOR someEntity : someList» «ENDFOR»
//		«IF 2>2» 
//		«ELSEIF 2>2»
//		
//		«ENDIF»
//		
//			public void computer(){
//				System.out
//		}'''
		
		
		var javaClass = '''
		package org.xtext.example.mydsl.generator
		import org.xtext.example.mydsl.mathCompiler.MathExp
		import org.xtext.example.mydsl.mathCompiler.Plus
		import org.xtext.example.mydsl.mathCompiler.Minus
		import org.xtext.example.mydsl.mathCompiler.Mult
		import org.xtext.example.mydsl.mathCompiler.Div
		import org.xtext.example.mydsl.mathCompiler.Num
		import org.xtext.example.mydsl.mathCompiler.Var
		import org.xtext.example.mydsl.mathCompiler.Let
		import org.xtext.example.mydsl.mathCompiler.Expression
		
		public class MathCompiler(){
			public MathCompiler(){
				}
			
			public double power(int base, int exponent){
				return Math.pow(base, exponent);
			}
			public void calculate() {
				«FOR Expression e : math.exp»
				Sytem.out.println("«e.label.toString()»" + " " + "«e.displayExp»");			
				«ENDFOR» 
			}
		'''
		
		fsa.generateFile("MathCompilerTest123.java", javaClass)
	}
		
}
