/**
 * generated by Xtext 2.21.0
 */
package org.xtext.example.mydsl.generator;

import com.google.common.collect.Iterators;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.xtext.example.mydsl.mathCompiler.AbstractExpression;
import org.xtext.example.mydsl.mathCompiler.Div;
import org.xtext.example.mydsl.mathCompiler.Expression;
import org.xtext.example.mydsl.mathCompiler.Let;
import org.xtext.example.mydsl.mathCompiler.MathExp;
import org.xtext.example.mydsl.mathCompiler.Minus;
import org.xtext.example.mydsl.mathCompiler.Mod;
import org.xtext.example.mydsl.mathCompiler.Mult;
import org.xtext.example.mydsl.mathCompiler.Num;
import org.xtext.example.mydsl.mathCompiler.Plus;
import org.xtext.example.mydsl.mathCompiler.Pow;
import org.xtext.example.mydsl.mathCompiler.Var;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class MathCompilerGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    final MathExp math = Iterators.<MathExp>filter(resource.getAllContents(), MathExp.class).next();
    this.printClass(math, fsa);
  }
  
  public String displayExp(final Expression exp) {
    String _switchResult = null;
    boolean _matched = false;
    if (exp instanceof Plus) {
      _matched=true;
      String _displayExp = this.displayExp(((Plus)exp).getLeft());
      String _plus = (_displayExp + "+");
      String _displayExp_1 = this.displayExp(((Plus)exp).getRight());
      _switchResult = (_plus + _displayExp_1);
    }
    if (!_matched) {
      if (exp instanceof Minus) {
        _matched=true;
        String _displayExp = this.displayExp(((Minus)exp).getLeft());
        String _plus = (_displayExp + "-");
        String _displayExp_1 = this.displayExp(((Minus)exp).getRight());
        _switchResult = (_plus + _displayExp_1);
      }
    }
    if (!_matched) {
      if (exp instanceof Mult) {
        _matched=true;
        String _displayExp = this.displayExp(((Mult)exp).getLeft());
        String _plus = (_displayExp + "*");
        String _displayExp_1 = this.displayExp(((Mult)exp).getRight());
        _switchResult = (_plus + _displayExp_1);
      }
    }
    if (!_matched) {
      if (exp instanceof Div) {
        _matched=true;
        String _displayExp = this.displayExp(((Div)exp).getLeft());
        String _plus = (_displayExp + "/");
        String _displayExp_1 = this.displayExp(((Div)exp).getRight());
        _switchResult = (_plus + _displayExp_1);
      }
    }
    if (!_matched) {
      if (exp instanceof Pow) {
        _matched=true;
        String _displayExp = this.displayExp(((Pow)exp).getLeft());
        String _plus = (_displayExp + "^");
        String _displayExp_1 = this.displayExp(((Pow)exp).getRight());
        _switchResult = (_plus + _displayExp_1);
      }
    }
    if (!_matched) {
      if (exp instanceof Mod) {
        _matched=true;
        String _displayExp = this.displayExp(((Mod)exp).getLeft());
        String _plus = (_displayExp + "%");
        String _displayExp_1 = this.displayExp(((Mod)exp).getRight());
        _switchResult = (_plus + _displayExp_1);
      }
    }
    if (!_matched) {
      if (exp instanceof Num) {
        _matched=true;
        _switchResult = Integer.toString(((Num)exp).getValue());
      }
    }
    if (!_matched) {
      if (exp instanceof Var) {
        _matched=true;
        _switchResult = ((Var)exp).getId();
      }
    }
    if (!_matched) {
      if (exp instanceof Let) {
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("let ");
        String _id = ((Let)exp).getId();
        _builder.append(_id);
        _builder.append(" = ");
        String _displayExp = this.displayExp(((Let)exp).getBinding());
        _builder.append(_displayExp);
        _builder.append(" in ");
        String _displayExp_1 = this.displayExp(((Let)exp).getBody());
        _builder.append(_displayExp_1);
        _builder.append(" end");
        _switchResult = _builder.toString();
      }
    }
    if (!_matched) {
      throw new Error("Invalid expression");
    }
    return _switchResult;
  }
  
  public String getLeftExp(final Expression exp) {
    String _switchResult = null;
    boolean _matched = false;
    if (exp instanceof Plus) {
      _matched=true;
      _switchResult = this.displayExp(((Plus)exp).getLeft());
    }
    if (!_matched) {
      if (exp instanceof Minus) {
        _matched=true;
        _switchResult = this.displayExp(((Minus)exp).getLeft());
      }
    }
    if (!_matched) {
      if (exp instanceof Mult) {
        _matched=true;
        _switchResult = this.displayExp(((Mult)exp).getLeft());
      }
    }
    if (!_matched) {
      if (exp instanceof Div) {
        _matched=true;
        _switchResult = this.displayExp(((Div)exp).getLeft());
      }
    }
    if (!_matched) {
      if (exp instanceof Pow) {
        _matched=true;
        _switchResult = this.displayExp(((Pow)exp).getLeft());
      }
    }
    if (!_matched) {
      if (exp instanceof Mod) {
        _matched=true;
        _switchResult = this.displayExp(((Mod)exp).getLeft());
      }
    }
    if (!_matched) {
      if (exp instanceof Num) {
        _matched=true;
        _switchResult = Integer.toString(((Num)exp).getValue());
      }
    }
    if (!_matched) {
      if (exp instanceof Var) {
        _matched=true;
        _switchResult = ((Var)exp).getId();
      }
    }
    if (!_matched) {
      if (exp instanceof Let) {
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("let ");
        String _id = ((Let)exp).getId();
        _builder.append(_id);
        _builder.append(" = ");
        String _displayExp = this.displayExp(((Let)exp).getBinding());
        _builder.append(_displayExp);
        _builder.append(" in ");
        String _displayExp_1 = this.displayExp(((Let)exp).getBody());
        _builder.append(_displayExp_1);
        _builder.append(" end");
        _switchResult = _builder.toString();
      }
    }
    if (!_matched) {
      throw new Error("Invalid expression");
    }
    return _switchResult;
  }
  
  public String getRightExp(final Expression exp) {
    String _switchResult = null;
    boolean _matched = false;
    if (exp instanceof Plus) {
      _matched=true;
      _switchResult = this.displayExp(((Plus)exp).getRight());
    }
    if (!_matched) {
      if (exp instanceof Minus) {
        _matched=true;
        _switchResult = this.displayExp(((Minus)exp).getRight());
      }
    }
    if (!_matched) {
      if (exp instanceof Mult) {
        _matched=true;
        _switchResult = this.displayExp(((Mult)exp).getRight());
      }
    }
    if (!_matched) {
      if (exp instanceof Div) {
        _matched=true;
        _switchResult = this.displayExp(((Div)exp).getRight());
      }
    }
    if (!_matched) {
      if (exp instanceof Pow) {
        _matched=true;
        _switchResult = this.displayExp(((Pow)exp).getRight());
      }
    }
    if (!_matched) {
      if (exp instanceof Mod) {
        _matched=true;
        _switchResult = this.displayExp(((Mod)exp).getRight());
      }
    }
    if (!_matched) {
      if (exp instanceof Num) {
        _matched=true;
        _switchResult = Integer.toString(((Num)exp).getValue());
      }
    }
    if (!_matched) {
      if (exp instanceof Var) {
        _matched=true;
        _switchResult = ((Var)exp).getId();
      }
    }
    if (!_matched) {
      if (exp instanceof Let) {
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("let ");
        String _id = ((Let)exp).getId();
        _builder.append(_id);
        _builder.append(" = ");
        String _displayExp = this.displayExp(((Let)exp).getBinding());
        _builder.append(_displayExp);
        _builder.append(" in ");
        String _displayExp_1 = this.displayExp(((Let)exp).getBody());
        _builder.append(_displayExp_1);
        _builder.append(" end");
        _switchResult = _builder.toString();
      }
    }
    if (!_matched) {
      throw new Error("Invalid expression");
    }
    return _switchResult;
  }
  
  public void printClass(final MathExp math, final IFileSystemAccess2 fsa) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("public class MathCompiler{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public MathCompiler(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public double power(int base, int exponent){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return Math.pow(base, exponent);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public int modulus(int a, int b){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return Math.floorMod (a,b);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void calculate() {");
    _builder.newLine();
    {
      EList<AbstractExpression> _abstractExpression = math.getAbstractExpression();
      for(final AbstractExpression e : _abstractExpression) {
        {
          Expression _exp = e.getExp();
          if ((_exp instanceof Pow)) {
            _builder.append("\t\t");
            _builder.append("System.out.println(\"");
            String _string = e.getLabel().toString();
            _builder.append(_string, "\t\t");
            _builder.append(" : \" + power(");
            String _leftExp = this.getLeftExp(e.getExp());
            _builder.append(_leftExp, "\t\t");
            _builder.append(",");
            String _rightExp = this.getRightExp(e.getExp());
            _builder.append(_rightExp, "\t\t");
            _builder.append("));");
            _builder.newLineIfNotEmpty();
          } else {
            Expression _exp_1 = e.getExp();
            if ((_exp_1 instanceof Mod)) {
              _builder.append("\t\t");
              _builder.append("System.out.println(\"");
              String _string_1 = e.getLabel().toString();
              _builder.append(_string_1, "\t\t");
              _builder.append(" : \" + modulus(");
              String _leftExp_1 = this.getLeftExp(e.getExp());
              _builder.append(_leftExp_1, "\t\t");
              _builder.append(",");
              String _rightExp_1 = this.getRightExp(e.getExp());
              _builder.append(_rightExp_1, "\t\t");
              _builder.append("));");
              _builder.newLineIfNotEmpty();
            } else {
              _builder.append("\t\t");
              _builder.append("System.out.println(\"");
              String _string_2 = e.getLabel().toString();
              _builder.append(_string_2, "\t\t");
              _builder.append(" : \" + ");
              String _displayExp = this.displayExp(e.getExp());
              _builder.append(_displayExp, "\t\t");
              _builder.append(");\t\t\t");
              _builder.newLineIfNotEmpty();
            }
          }
        }
      }
    }
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    String javaClass = _builder.toString();
    fsa.generateFile("MathCompiler.java", javaClass);
  }
}
