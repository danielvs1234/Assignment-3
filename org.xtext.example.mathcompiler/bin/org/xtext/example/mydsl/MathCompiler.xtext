grammar org.xtext.example.mydsl.MathCompiler with org.eclipse.xtext.common.Terminals

generate mathCompiler "http://www.xtext.org/example/mydsl/MathCompiler"
//MathExp:
//	'result' 'is' exp=Exp
//;

MathExp:
	abstractExpression+=AbstractExpression (',' abstractExpression+=AbstractExpression)*
;

AbstractExpression:
	label=STRING exp=Exp
;

Exp returns Expression:
	Factor (('+' {Plus.left=current} | '-' {Minus.left=current}) right=Factor)*
;


Factor returns Expression:
	Top (('*' {Mult.left=current} | '/' {Div.left=current}) right=Top)*	
;

Top returns Expression:
	Primary (('^' {Pow.left=current} | '%' {Mod.left=current}) right=Primary)*
;

Primary returns Expression:
	Number | Parenthesis | VariableBinding | VariableUse
;

VariableUse returns Expression:
	{Var} id=ID
;

VariableBinding returns Expression:
	{Let} 'let' id=ID '=' binding=Exp 'in' body=Exp 'end'
;

Parenthesis returns Expression:
	'(' Exp ')'
;

Number returns Expression:
	{Num} value=INT
;

